scalar CustomPoint
scalar CustomDate

type Query {
  fuzzyBusinessByName(searchString: String): [Business!]!
    @cypher(
      # First create full-text index
      # CREATE FULLTEXT INDEX businessNameIndex FOR (n:Business) ON EACH [n.name]
      statement: """
      CALL db.index.fulltext.queryNodes( 'businessNameIndex', $searchString+'~')
      YIELD node RETURN node
      """
    )
}

type Business {
  businessId: ID!
  waitTime: Int! @customResolver
  averageStars: Float!
    @cypher(
      statement: "MATCH (this)<-[:REVIEWS]-(r:Review) RETURN avg(r.stars)"
    )
  recommended(first: Int = 1): [Business!]!
    @cypher(
      statement: """
      MATCH (this)<-[:REVIEWS]-(:Review)<-[:WROTE]-(:User)-[:WROTE]->(:Review)-[:REVIEWS]->(rec:Business)
      WITH rec, COUNT(*) AS score
      RETURN rec ORDER BY score DESC LIMIT $first
      """
    )
  name: String!
  city: String!
  state: String!
  address: String!
  location: CustomPoint! @customResolver
  reviews: [Review!]! @relationship(type: "REVIEWS", direction: IN)
  categories: [Category!]! @relationship(type: "IN_CATEGORY", direction: OUT)
}

type User {
  userID: ID!
  name: String!
  reviews: [Review!]! @relationship(type: "WROTE", direction: OUT)
}

type Review {
  reviewId: ID!
  stars: Float!
  date: CustomDate! @customResolver
  text: String
  user: User! @relationship(type: "WROTE", direction: IN)
  business: Business! @relationship(type: "REVIEWS", direction: OUT)
}

type Category {
  name: String!
  businesses: [Business!]! @relationship(type: "IN_CATEGORY", direction: IN)
	count: Int!
	  @cypher(
			statement: """
			MATCH (this)<-[:IN_CATEGORY]-(b:Business) with b RETURN COUNT(b)
			"""
		)
}
