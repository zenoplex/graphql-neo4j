/* eslint-disable */
// DO NOT EDIT -- Generated by graphql-codegen
import { TypedDocumentNode as DocumentNode } from "@graphql-typed-document-node/core";
export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<
  T extends { [key: string]: unknown },
  K extends keyof T,
> = { [_ in K]?: never };
export type Incremental<T> =
  | T
  | {
      [P in keyof T]?: P extends " $fragmentName" | "__typename" ? T[P] : never;
    };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string };
  String: { input: string; output: string };
  Boolean: { input: boolean; output: boolean };
  Int: { input: number; output: number };
  Float: { input: number; output: number };
  CustomDate: { input: string; output: string };
  CustomPoint: {
    input: { latitude: "number"; longitude: "number" };
    output: { latitude: "number"; longitude: "number" };
  };
};

export type Business = {
  __typename?: "Business";
  address: Scalars["String"]["output"];
  averageStars: Scalars["Float"]["output"];
  businessId: Scalars["ID"]["output"];
  categories: Array<Category>;
  city: Scalars["String"]["output"];
  location: Scalars["CustomPoint"]["output"];
  name: Scalars["String"]["output"];
  recommended: Array<Business>;
  reviews: Array<Review>;
  state: Scalars["String"]["output"];
  waitTime: Scalars["Int"]["output"];
};

export type BusinessRecommendedArgs = {
  first?: InputMaybe<Scalars["Int"]["input"]>;
};

export type Category = {
  __typename?: "Category";
  businesses: Array<Business>;
  count: Scalars["Int"]["output"];
  name: Scalars["String"]["output"];
};

export type Query = {
  __typename?: "Query";
  businesses: Array<Business>;
  fuzzyBusinessByName: Array<Business>;
};

export type QueryBusinessesArgs = {
  searchString?: InputMaybe<Scalars["String"]["input"]>;
};

export type QueryFuzzyBusinessByNameArgs = {
  searchString?: InputMaybe<Scalars["String"]["input"]>;
};

export type Review = {
  __typename?: "Review";
  business: Business;
  date: Scalars["CustomDate"]["output"];
  reviewId: Scalars["ID"]["output"];
  stars: Scalars["Float"]["output"];
  text?: Maybe<Scalars["String"]["output"]>;
  user: User;
};

export type User = {
  __typename?: "User";
  name: Scalars["String"]["output"];
  reviews: Array<Review>;
  userID: Scalars["ID"]["output"];
};

export type GetBusinessesByCategoryQueryVariables = Exact<{
  searchString: Scalars["String"]["input"];
}>;

export type GetBusinessesByCategoryQuery = {
  __typename?: "Query";
  fuzzyBusinessByName: Array<{ __typename?: "Business"; businessId: string }>;
};

export type GetBusinessesQueryVariables = Exact<{
  searchString?: InputMaybe<Scalars["String"]["input"]>;
}>;

export type GetBusinessesQuery = {
  __typename?: "Query";
  businesses: Array<{
    __typename?: "Business";
    businessId: string;
    name: string;
    address: string;
    categories: Array<{ __typename?: "Category"; name: string }>;
  }>;
};

export const GetBusinessesByCategoryDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "getBusinessesByCategory" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "searchString" },
          },
          type: {
            kind: "NonNullType",
            type: {
              kind: "NamedType",
              name: { kind: "Name", value: "String" },
            },
          },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "fuzzyBusinessByName" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "searchString" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "searchString" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "businessId" } },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<
  GetBusinessesByCategoryQuery,
  GetBusinessesByCategoryQueryVariables
>;
export const GetBusinessesDocument = {
  kind: "Document",
  definitions: [
    {
      kind: "OperationDefinition",
      operation: "query",
      name: { kind: "Name", value: "getBusinesses" },
      variableDefinitions: [
        {
          kind: "VariableDefinition",
          variable: {
            kind: "Variable",
            name: { kind: "Name", value: "searchString" },
          },
          type: { kind: "NamedType", name: { kind: "Name", value: "String" } },
        },
      ],
      selectionSet: {
        kind: "SelectionSet",
        selections: [
          {
            kind: "Field",
            name: { kind: "Name", value: "businesses" },
            arguments: [
              {
                kind: "Argument",
                name: { kind: "Name", value: "searchString" },
                value: {
                  kind: "Variable",
                  name: { kind: "Name", value: "searchString" },
                },
              },
            ],
            selectionSet: {
              kind: "SelectionSet",
              selections: [
                { kind: "Field", name: { kind: "Name", value: "businessId" } },
                { kind: "Field", name: { kind: "Name", value: "name" } },
                { kind: "Field", name: { kind: "Name", value: "address" } },
                {
                  kind: "Field",
                  name: { kind: "Name", value: "categories" },
                  selectionSet: {
                    kind: "SelectionSet",
                    selections: [
                      { kind: "Field", name: { kind: "Name", value: "name" } },
                    ],
                  },
                },
              ],
            },
          },
        ],
      },
    },
  ],
} as unknown as DocumentNode<GetBusinessesQuery, GetBusinessesQueryVariables>;
